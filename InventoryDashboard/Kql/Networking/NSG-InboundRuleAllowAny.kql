Resources
| extend SecurityRules  = parse_json(properties.securityRules)
| extend Rules = SecurityRules
| mvexpand Rules
| extend Direction = Rules.properties.direction
| extend InSrcAddrPrefixes = parse_json(Rules.properties.sourceAddressPrefixes)
| extend InSrcAddrPrefix = Rules.properties.sourceAddressPrefix
| extend RuleName = tostring(Rules.name)
| extend Priority = tostring(Rules.properties.priority)
| extend Access = tostring(Rules.properties.access)
| extend Access = tostring(Rules.properties.access)
| extend Protocol = tostring(Rules.properties.protocol)

| extend SrcAddrPrefixes =
iif(array_length(Rules.properties.sourceAddressPrefixes) == 0, "", strcat_array(Rules.properties.sourceAddressPrefixes, ","))
| extend SrcAddr = strcat(tostring(Rules.properties.sourceAddressPrefix), SrcAddrPrefixes)

| extend DestAddrPrefixes =
iif(array_length(Rules.properties.destinationAddressPrefixes) == 0, "", strcat_array(Rules.properties.destinationAddressPrefixes, ","))
| extend DestAddr = strcat(tostring(Rules.properties.destinationAddressPrefix),DestAddrPrefixes)

| extend DestPortRanges =
iif(array_length(Rules.properties.destinationPortRanges) == 0, "", strcat_array(Rules.properties.destinationPortRanges, ","))
| extend DestPorts = strcat(tostring(Rules.properties.destinationPortRange),DestPortRanges)

| where
	type == "microsoft.network/networksecuritygroups" and
	array_length(SecurityRules) > 0 and 
	Access =~ "Allow" and
	Direction == "Inbound" and 
	( InSrcAddrPrefixes in~ ("any", "*", "0.0.0.0/0") or InSrcAddrPrefix in~ ("any", "*", "0.0.0.0/0") )
| distinct 
	resourceGroup, name, 
	RuleName,
	Priority,
	Access,
	Protocol,
	SrcAddr,
	DestAddr,
	DestPorts
| project 
	["Resource Group"] = resourceGroup,
	["NSG Name"] = name, 
	["Rule Name"] = RuleName,
	Priority,
	Access,
	Protocol,
	SrcAddr,
	DestAddr,
	DestPorts